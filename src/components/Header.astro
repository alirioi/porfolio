---
const navItems = [
  {
    title: "Proyectos",
    label: "proyectos",
    url: "/#proyectos",
  },
  {
    title: "Sobre mí",
    label: "sobre-mi",
    url: "/#sobre-mi",
  },
  {
    title: "Conocimientos",
    label: "conocimientos",
    url: "/#conocimientos",
  },
  {
    title: "Contacto",
    label: "contacto",
    url: "/#contacto",
  },
];
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2 px-2 md:px-6"
>
  <nav
    class="text-dark-50 flex px-3 justify-center items-center rounded-full text-sm font-medium"
  >
    {
      navItems.map((link) => (
        <a
          class="relative block p-2 transition hover:text-primary-300"
          href={link.url}
          aria-label={link.label}
        >
          {link.title}
        </a>
      ))
    }
  </nav>
</header>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const setActiveNavItem = (targetId: any) => {
      navItems.forEach((item) => {
        if (item.getAttribute("aria-label") === targetId) {
          item.classList.add("text-primary-300"); // Clase activa
        } else {
          item.classList.remove("text-primary-300"); // Remover clase de los demás
        }
      });
    };

    // Determinar el threshold dinámico según el tamaño de la pantalla
    const getThreshold = () => {
      if (window.innerWidth < 768) {
        return 0.35; // Pantallas pequeñas: activa cuando el 30% de la sección es visible
      } else {
        return 0.4; // Pantallas grandes: activa cuando el 70% de la sección es visible
      }
    };

    // IntersectionObserver para detectar la sección visible
    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        console.log(
          `Section ${entry.target.id} is intersecting: ${entry.isIntersecting}`
        );
        if (entry.isIntersecting) {
          setActiveNavItem(entry.target.id);
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: window.innerWidth < 768 ? "-10% 0px 10% 0px" : "0px", // Ajusta el margen superior e inferior

      threshold: getThreshold(), // Detecta el % visible de la sección
    });

    // Observar cada sección
    sections.forEach((section) => {
      observer.observe(section);
    });

    // Evento click en los enlaces del menú
    navItems.forEach((item) => {
      item.addEventListener("click", (event) => {
        event.preventDefault(); // Evitar el comportamiento predeterminado
        const targetId: any = item.getAttribute("aria-label");
        const targetSection = document.getElementById(targetId);

        if (targetSection) {
          targetSection.scrollIntoView({ behavior: "smooth" }); // Desplazamiento suave
          setActiveNavItem(targetId); // Actualizar el enlace activo
          history.pushState(null, "", `/#${targetId}`);
        }
      });
    });

    // Cleanup para desconectar el observer cuando la página no está visible
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };

    // Recalcular el threshold dinámico al redimensionar la ventana
    window.addEventListener("resize", () => {
      observer.disconnect(); // Desconectar el observer actual
      const newObserver = new IntersectionObserver(callback, {
        root: null,
        rootMargin: window.innerWidth < 768 ? "-10% 0px 10% 0px" : "0px",
        threshold: getThreshold(), // Recalcular el threshold
      });
      sections.forEach((section) => {
        newObserver.observe(section);
      });
    });
  });
</script>

<style>
  nav {
    animation: nav-shadow 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
    background-color: #111111e4;
  }

  @keyframes nav-shadow {
    0% {
      background-color: #11111100;
    }
    to {
      box-shadow:
        0 10px 15px -3px rgba(0, 0, 0, 0.1),
        0 4px 6px -4px rgba(0, 0, 0, 0.1),
        0 0 0 1px rgba(255, 255, 255, 0.1);
      -webkit-backdrop-filter: blur(8px);
      backdrop-filter: blur(8px);
    }
  }
</style>
